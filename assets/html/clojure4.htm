<!--
    Powered By nodePPT
    version: 0.6.7
    site: https://github.com/ksky521/nodePPT
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>clojure语法学习之逻辑语法 - By Jack</title>
    <link rel="stylesheet" media="all" href="../css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="../css/phone.css">
    <link rel="stylesheet" href="../js/highlight/monokai.css">
</head>
<body>

<slides id="container">
    <slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>语法注释</h2>

</hgroup><article>

<ul class="build">
<li><p>单行注释 </p>
<ul class="build">
<li><p>&quot;;&quot; </p>
<pre><code class="clojure">
          hello.core=&gt; (println &quot;hello&quot;) ;这是单行注释  
          &quot;hello&quot;  
          hello.core=&gt; (println &quot;hello&quot;  ;这是单行注释
                  &quot;123&quot;
                  )   
          &quot;hello 123&quot;</code></pre>
</li>
</ul>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>语法注释</h2>

</hgroup><article>

<ul class="build">
<li><p>多行代码块注释 </p>
<ul class="build">
<li><p>&quot;#_&quot;</p>
<pre><code class="clojure">          hello.core=&gt; (println &quot;hello&quot; (str &quot;jack&quot;))
          hello jack
          nil  
          hello.core=&gt; (println &quot;hello&quot; #_(str &quot;jack&quot;))
          hello
          nil
          hello.core=&gt; (println &quot;hello&quot; #_(str &quot;jack&quot;))
          hello
          nil 
          hello.core=&gt; #_(println 
                   &quot;hello&quot; #_(str &quot;jack&quot;))</code></pre>
</li>
</ul>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>Bindings</h2>

</hgroup><article>

<ul class="build">
<li>Clojure里面是没有所谓创建变量声明的概念,它用Bindings来替代变量。包括：全局binding “def”，当前局部bingding “let”，以及宏 binding </li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>Bindings（续）</h2>

</hgroup><article>

<ul>
<li><p>def 这个special form 定义一个全局的 binding,并且你还可以给它一个&quot;root value&quot;,例如:</p>
<pre><code class="clojure">           hello.core=&gt; (def ^:dynamic foo 1)
           #&#39;hello.core/foo</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>Bindings（续）</h2>

</hgroup><article>

<ul>
<li><p>那么对于变量foo来说,1是它的root binding,这个值对于所有线程可见,REPL的主线程可见:</p>
<pre><code class="clojure">
       hello.core=&gt; foo
       1</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>Bindings（续）</h2>

</hgroup><article>

<ul>
<li><p>启动一个独立线程查看下foo的值：</p>
<pre><code class="clojure">
         hello.core=&gt;  (.start (Thread. #(println foo)))
         1
         nil</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>Bindings（续）</h2>

</hgroup><article>

<ul>
<li><p>但是，利用binding宏可以给var创建一个thread-local级别的binding，binding只对于持有它的线程是可见的，直到线程执行超过binding的范围为止，binding对于其他线程是不可见的。：</p>
<pre><code class="clojure">
         hello.core=&gt; (binding [foo 2] foo)
         2</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>Bindings（续）</h2>

</hgroup><article>

<ul>
<li><p>let和binding非常相似，两者的调用方式近乎一致：</p>
<pre><code class="clojure">
         hello.core=&gt;  (let [foo 2] foo)
         2</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>Bindings（续）</h2>

</hgroup><article>

<ul>
<li><p>下面我们从一个例子可以看出两者的不同，定义一个print-foo函数，用于打印foo变量：：</p>
<pre><code class="clojure">
         hello.core=&gt;   (defn print-foo [] (println foo))
         #&#39;hello.core/print-foo</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>Bindings（续）</h2>

</hgroup><article>

<ul>
<li><p>foo不是从参数传入的，而是直接从当前context寻找的，因此foo需要预先定义。分别通过let和binding来调用print-foo,可以看到，print-foo仍然打印的是初始值1，而不是let绑定的2：</p>
<pre><code class="clojure">
       hello.core=&gt; (let [foo 2] (print-foo))
       1
       nil</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>Bindings（续）</h2>

</hgroup><article>

<ul>
<li><p>如果用binding:print-foo这时候打印的就是binding绑定的2。这是为什么呢？这是由于let的绑定是静态的，它并不是改变变量foo的值，而是用一个词法作用域的foo“遮蔽”了外部的foo的值。</p>
<pre><code class="clojure">
      hello.core=&gt; (binding [foo 2] (print-foo))
      2
      nil</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>Bindings（续）</h2>

</hgroup><article>

<ul>
<li><p>Clojure告诉你,let中的foo不是一个有效的赋值目标，foo是不可变的值。set!可以修改binding的变量：</p>
<pre><code class="clojure">
         hello.core=&gt; (let [foo 2] (set! foo 3))
         CompilerException java.lang.IllegalArgumentException: Cannot assign to non-mutable: foo, compiling:(/tmp/form-init5385717729874115910.clj:1:1) 

         hello.core=&gt; (binding [foo 2] (set! foo 3) (print-foo))
         3
         nil</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>循环控制</h2>

</hgroup><article>

<ul class="build">
<li><p>repeatedly 字面意思为重复函数。一般的用法如下: </p>
<pre><code class="clojure">         hello.core=&gt; (repeatedly 5 #(str 1))
         (&quot;1&quot; &quot;1&quot; &quot;1&quot; &quot;1&quot; &quot;1&quot;)</code></pre>
</li>
<li><p>repeat函数：repeat函数接受常量参数，用法如下:</p>
<pre><code class="clojure">
        hello.core=&gt; (repeat 5 1)
        (1 1 1 1 1)</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>循环控制(续)</h2>

</hgroup><article>

<ul class="build">
<li><p>当repeat、repeatedly函数只接受一个参数时（即没有重复次数的参数），需要配合take来中止，否则会产生内存溢出的错误。如下 </p>
<pre><code class="clojure">         hello.core=&gt; (repeatedly #(int 11))  
         OutOfMemoryError Java heap space 
         hello.core=&gt; (take 5(repeatedly #(int 11)))  
         (11 11 11 11 11)</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>循环控制(续)</h2>

</hgroup><article>

<ul class="build">
<li><p>iterate,迭代函数形式如(iterate f v) ,相当于while(true) { v = f(v) },所以一般要配合 take 来终止  </p>
<pre><code class="clojure">         hello.core=&gt; (take 10 (iterate inc 11))
         (11 12 13 14 15 16 17 18 19 20)
         hello.core=&gt; (take 10 (iterate #(+ % 5) 11))  
         (11 16 21 26 31 36 41 46 51 56)
         hello.core=&gt; (take 10 (iterate #(* % 2) 11))  
         (11 16 21 26 31 36 41 46 51 56)</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>循环控制(续)</h2>

</hgroup><article>

<ul class="build">
<li><p>dotimes 会执行给定的表达式一定次数, 一个本地binding会被给定值：从0到一个给定的数值。如下：   </p>
<pre><code class="clojure">         hello.core=&gt; (dotimes [num 3] (println &quot;number:&quot; num)) 
         number: 0
         number: 1
         number: 2
         nil</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>循环控制(续)</h2>

</hgroup><article>

<ul class="build">
<li>doseq,遍历给定的集合,并用指定的表达式以有副作用的方式执行它们, 并且返回nil    <pre><code class="clojure">         hello.core=&gt; (doseq [i (range 10)] (println i))  
         0
         1
         .
         .
         9
         nil
         hello.core=&gt; (doseq [i (range 10) j (range 2)] (println (str i &quot;__&quot; j)))  
         0__0
         0__1
         1__0
         1__1
          .
          .
         9__0
         9__1
          nil</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>循环控制(续)</h2>

</hgroup><article>

<ul class="build">
<li>for,和doseq的语法是一样的，只不过for返回的是一个序列   <pre><code class="clojure">         hello.core=&gt;  (for [x (range 5)] (* x x))    
         (0 1 4 9 16)
         hello.core=&gt; (for [x (range 5) y [2 3]] (* x y))    
         (0 0 2 3 4 6 6 9 8 12)</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>条件判断</h2>

</hgroup><article>

<ul class="build">
<li>if：将一个判断表达式作为它的第一个参数进行求值。如果求值为true，那么就返回它的第二个参数（相当于“then”子句）的求值结果。如果结果为false（包括nil）就返回第三个参数的求值结果（相当于“else”子句） <pre><code class="clojure">         hello.core=&gt;  (defn is-small [number] (if (&lt; number 100) &quot;yes&quot; &quot;no&quot;))   
         #&#39;hello.core/is-small
         hello.core=&gt; (is-small 50)  
         &quot;yes&quot;
         hello.core=&gt; (is-small 150)  
         &quot;no&quot;</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>条件判断(续)</h2>

</hgroup><article>

<ul class="build">
<li>if条件中除了false和nil，其他都为true：  <pre><code class="clojure">         hello.core=&gt;  (if true &quot;true&quot; &quot;false&quot;)  
         &quot;true&quot;  
         hello.core=&gt; (if 0 &quot;true&quot; &quot;false&quot;)   
         &quot;true&quot; 
         hello.core=&gt; (if &quot;&quot; &quot;true&quot; &quot;false&quot;)  
         &quot;true&quot;
         hello.core=&gt; (if nil &quot;true&quot; &quot;false&quot;)  
         &quot;false&quot; 
         hello.core=&gt; (if false &quot;true&quot; &quot;false&quot;)  
         &quot;false&quot;</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>条件判断(续)</h2>

</hgroup><article>

<ul class="build">
<li><p>if-not：跟 if 的用法相同，但是作用是相反的。当逻辑为false的时候会去计算第二个参数的值，为true的时候才计算第三个参数的值 ：  </p>
<pre><code class="clojure">         hello.core=&gt;  (if-not (zero? 0) &quot;no&quot; &quot;yes&quot;)  
         &quot;yes&quot;   
         hello.core=&gt; (if (not (zero? 0)) &quot;no&quot; &quot;yes&quot;)    
         &quot;yes&quot;</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>条件判断(续)</h2>

</hgroup><article>

<ul class="build">
<li><p>if-let：if-let宏接受两个参数，第一个参数为绑定变量，第二个参数为表达式。并根据第二个表达式参数返回的值确定执行then、else语句。  </p>
<pre><code class="clojure">         hello.core=&gt;  (defn if-let-test [arg] (if-let [x arg] &quot;true&quot; &quot;false&quot;))    
         #&#39;hello.core/if-let-test   
         hello.core=&gt; (if-let-test 1)   
         &quot;true&quot;
         hello.core=&gt; (if-let-test nil)   
         &quot;false&quot;</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>条件判断(续)</h2>

</hgroup><article>

<ul class="build">
<li><p>when: when没有else子句，如果when后面第一个参数为true，则执行条件后的所有语句，否则返回nil。 </p>
<pre><code class="clojure">         hello.core=&gt;  (when false (println &quot;is true&quot;) &quot;return true&quot;)    
         nil   
         hello.core=&gt; (when true (println &quot;is true&quot;) &quot;return true&quot;)   
         is true
         &quot;return true&quot;</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>条件判断(续)</h2>

</hgroup><article>

<ul class="build">
<li><p>when-not: when-not与when类似，只是第一个参数返回false，才执行后面所有语句，否则返回nil。 </p>
<pre><code class="clojure">         hello.core=&gt;  (when-not  false (println &quot;is true&quot;) &quot;return true&quot;)   
         is true
         &quot;return true&quot;   
         hello.core=&gt; (when-not true (println &quot;is true&quot;) &quot;return true&quot;)   
         nil</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>条件判断(续)</h2>

</hgroup><article>

<ul class="build">
<li><p>cond : cond 可以有任意个“判断/表达式”对，作为它的参数。如果满足第一个判断，就执行第一个判断对应的表达式。如果没有满足第一个条件，就会尝试后面的判断表达式，以此类推。如果一个都没有满足，那么返回 nil 除非你用一个 :else 关键字放在最后来抓住剩下的所有可能性。cond类似于java中的switch..case..default语句，如：  </p>
<pre><code class="clojure">         hello.core=&gt;  (defn f [n] (cond (&lt; n 0) &quot;&lt;0&quot; (&lt; n 10) &quot;&lt;10&quot; :else &quot;&gt;=10&quot;))   
         #&#39;hello.core/f  
         hello.core=&gt; (f -2)    
         &quot;&lt;0&quot;
         hello.core=&gt; (f 2)    
         &quot;&lt;10&quot;
         hello.core=&gt; (f 12)    
         &quot;&gt;=10&quot;</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>条件判断(续)</h2>

</hgroup><article>

<ul class="build">
<li><p>case : case可以简单理解为java中switch的case，如下：  </p>
<pre><code class="clojure">         hello.core=&gt;  (let [mystr &quot;hello&quot;]
                                 (case mystr    
                                   &quot;&quot; 0   
                                   &quot;hello&quot; (count mystr)))    
         5 
         hello.core=&gt; (let [mystr &quot;no match&quot;]   
                                (case mystr    
                                      &quot;&quot; 0   
                                      &quot;hello&quot; (count mystr)   
                                      &quot;default&quot;)) 
         &quot;default&quot;</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>条件判断(续)</h2>

</hgroup><article>

<ul class="build">
<li><p>case可以用列表一次匹配多个值：   </p>
<pre><code class="clojure">         hello.core=&gt;  (defn f [x] (case x  
                              (5 10 15) &quot;5的倍数&quot;  
                              (3 6 9) &quot;3的倍数&quot;  
                              &quot;others&quot;))    
         #&#39;hello.core/f   
         hello.core=&gt; (f 3) 
         &quot;3的倍数&quot;
         hello.core=&gt; (f 5) 
         &quot;5的倍数&quot;
         hello.core=&gt; (f 15) 
         &quot;5的倍数&quot; 
         hello.core=&gt; (f 1) 
         &quot;others&quot;</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>条件判断(续)</h2>

</hgroup><article>

<ul class="build">
<li>do:do执行多条语句，返回最后一条语句值 :   <pre><code class="clojure">         hello.core=&gt;  (do (println 123) (println 321) -1)    
         123
         321
         -1</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>条件判断(续)</h2>

</hgroup><article>

<ul class="build">
<li>loop、recur:递归调用 :   <pre><code class="clojure">         hello.core=&gt;  (loop [sum 0 cnt 10] (if (= cnt 0) sum (recur (+ cnt sum) (dec cnt))))    
         55
         hello.core=&gt;  (loop [sum 0 cnt 0] (if (= cnt 11) sum (recur (+ cnt sum) (inc cnt))))    
         55</code></pre>
</li>
</ul>

</article></slide>
<slide class="slide fill" style="background-image:url('../img/bg.jpg	')"><hgroup>
<h2>作业</h2>

</hgroup><article>

<ul class="build">
<li><p>在上次作业的基础上，加入输入年纪的功能 ，如小于18则打印出未成年人，反之为成年人:   </p>
<pre><code class="bash">         请输入姓名
         name
         请输入年龄
         15
         Hello,  name  i  am eman ! 未成年人</code></pre>
</li>
</ul>

</article></slide>
    <slide class="slide thank-you-slide segue nobackground">
        <article class="flexbox vleft auto-fadein">
            <h2>Q &amp; A</h2>
            <h3>&lt;Thank You!&gt;</h3>
        </article>
    </slide>
    <slide class="slide logoslide dark nobackground">
        <article class="flexbox vcenter">
          <h2 style="color: white;">Powered By nodePPT v0.6.7</h2>
        </article>
      </slide>
    <div class="slideTip" id="tip"></div>
</slides>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<script src="../js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host +  '/assets/';
MixJS.config({
    baseURL:base + 'js/'
});
MixJS.use('event/broadcast', function($){
    $.loadJS('../js/nodeppt.js',function(){
        Slide.init({
            containerID: 'container',
            drawBoardID: 'drawBoard',
            slideClass: '.slide',
            buildClass: '.build',
            progressID: 'progress',
            transition: 'cards',
            width: 1100,
            dir: '../js/',
            
            //打开下面的注释就开启postMessage方式
            //访问网址127.0.0.1:8080/ppt/demo#client
            control:{
                type: 'postMessage'
            },
            
            tipID: 'tip'
        });
    }).loadJS('../js/highlight/highlight.pack.js',function(){

        hljs.tabReplace = '  ';
        hljs.initHighlightingOnLoad();
    });
});
</script>
<script src="../js/demo.js"></script>
<link rel="stylesheet" href="../css/demo.css">
</body>
</html>
